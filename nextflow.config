/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    flusra Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // TODO-GP Specify your pipeline's command line flags
    // Input options

    // FETCH SRA DATA
    // BioProject ID to fetch SRA data from
    bioproject                  = null
    // Email to use for SRA data fetch
    email                       = null
    // Provide an existing metadata file to bypass processing already processed SRA data
    metadata                    = null
    // Use to ONLY fetch SRA metadata
    only_fetch                  = false
    // Use to ONLY fetch new SRA data and metadata
    fetch_and_pull              = false
    check_retracted             = true

    // PROCESS SRA DATA
    // TSV file containing SRA accessions to process
    samples_to_process          = null
    // Reference genome to use for mapping
    reference                   = null
    // GFF file to use for variant calling (optional)
    // format: ["gene_segment": "gff_file"] e.g. ["HA": "ha.gff"]
    // multiple gff files can be provided by separating with a comma
    gff_files                   = []
    trimming_config             = "${projectDir}/assets/NO_FILE"

    // PROCESSING LOCAL DATA
    // Path to directory containing all fastq files to process
    fastq_dump_path             = null
    // List of milk samples to process (text file)
    milk_sra_accessions         = null
    // List of SRA accessions to process (text file)
    sra_accessions              = null
    // List of amplicon SRA accessions to trim (text file)
    amplicon_sra_accessions     = null

    // PROCESS MILK DATA
    // Reference genome to use for mapping milk samples
    milk_reference              = null
    // Barcode to use for demultiplexing milk samples
    milk_barcode                = null

    // TOOL OPTIONS
    // Minimum frequency threshold(0 - 1) to call consensus
    consensus_threshold         = 0.5
    // Minimum depth to call consensus
    consensus_min_depth         = 1
    // Minimum frequency threshold(0 - 1) to call variants
    variant_threshold           = 0.01
    // Minimum depth to call variants
    variant_min_depth           = 1
    // Demix depth cut off
    demix_depthcutoff          = 0
    // Demix autoadapt
    demix_autoadapt             = false
    // Fastp options
    fastp_trim_front_read_1     = 0
    fastp_trim_front_read_2     = 0
    fastp_trim_tail_read_1      = 0
    fastp_trim_tail_read_2      = 0

    // Boilerplate options
    // Output directory
    outdir                      = './outputs'
    publish_dir_mode            = 'copy'
    samples_to_process          = null

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                  = '128.GB'
    max_cpus                    = 32
    max_time                    = '240.h'
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

profiles {
    debug {
        dumpHashes              = true
        process.beforeScript    = 'echo $HOSTNAME'
        cleanup                 = false
        nextflow.enable.configProcessNamesValidation = true
    }
    conda {
        conda.enabled           = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        conda.channels          = ['conda-forge', 'bioconda']
        apptainer.enabled       = false
    }
    mamba {
        conda.enabled           = true
        conda.useMamba          = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    docker {
        docker.enabled          = true
        conda.enabled           = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
        docker.runOptions       = '-u $(id -u):$(id -g)'
    }
    arm {
        docker.runOptions       = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    test      { includeConfig 'conf/test.config'      }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.mmd"
}

manifest {
    name            = 'flusra'
    author          = """Praneeth G"""
    homePage        = 'https://github.com/gp201/flusra'
    description     = """A pipeline to assemble avian flu genomes"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = '1.0dev'
    doi             = ''
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
